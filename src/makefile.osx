# Copyright (c) 2009-2010 Satoshi Nakamoto
# Distributed under the MIT/X11 software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

#
# OSX Makefile
#

USE_UPNP:=1
USE_IPV6:=1
USE_LEVELDB=1

BUILD_RELEASE=1
CC=/opt/clang/7.0.0/bin/clang
CXX=/opt/clang/7.0.0/bin/clang++
xOPT_LEVEL=-O3

#ifeq (${ARCH}, i686)
# EXT_OPTIONS=-msse2
#endif

BOOST_PATH=/opt/boost_1_68_0
OPENSSL_PATH=/opt/libressl-2.8.2
INCLUDEPATHS= \
 -I "/opt/clang/7.0.0/include" \
 -I $(BOOST_PATH)/include \
 -I $(OPENSSL_PATH)/include \
 -I "/opt/db-4.8.30/include" \
 -I "/opt/miniupnpc/include/miniupnpc" \
 -I "leveldb/include" \
 -I "leveldb/helpers" \

#LIBS+= -dead_strip
LIBS+= \
 -L "/opt/clang/7.0.0/lib" \
 $(BOOST_PATH)/lib/libboost_system.a \
 $(BOOST_PATH)/lib/libboost_filesystem.a \
 $(BOOST_PATH)/lib/libboost_program_options.a \
 $(BOOST_PATH)/lib/libboost_thread.a \
 $(BOOST_PATH)/lib/libboost_chrono.a \
 $(OPENSSL_PATH)/lib/libssl.a \
 $(OPENSSL_PATH)/lib/libcrypto.a \
 "/opt/db-4.8.30/lib/libdb_cxx-4.8.a" \

ifneq (${USE_IPV6}, -)
 DEFS += -DUSE_IPV6=$(USE_IPV6)
endif

ifneq (${USE_UPNP}, -)
 DEFS += -DUSE_UPNP=$(USE_UPNP)
 LIBS += /opt/miniupnpc/lib/libminiupnpc.a
endif

LIBS+= \
 -l z \
 -l dl

#DEFS+=-DMAC_OSX -DMSG_NOSIGNAL=0 -DBOOST_THREAD_USE_LIB -DBOOST_SPIRIT_THREADSAFE -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -DUSE_ASM
DEFS=-DMAC_OSX -DMSG_NOSIGNAL=0

# Hardening
# Make some classes of vulnerabilities unexploitable in case one is discovered.
#
    # This is a workaround for Ubuntu bug #691722, the default -fstack-protector causes
    # -fstack-protector-all to be ignored unless -fno-stack-protector is used first.
    # see: https://bugs.launchpad.net/ubuntu/+source/gcc-4.5/+bug/691722
    #HARDENING=-fno-stack-protector

    # Stack Canaries
    # Put numbers at the beginning of each stack frame and check that they are the same.
    # If a stack buffer if overflowed, it writes over the canary number and then on return
    # when that number is checked, it won't be the same and the program will exit with
    # a "Stack smashing detected" error instead of being exploited.
    #HARDENING+=-fstack-protector-all -Wstack-protector

    # Make some important things such as the global offset table read only as soon as
    # the dynamic linker is finished building it. This will prevent overwriting of addresses
    # which would later be jumped to.
    #LDHARDENING+=-Wl,-z,relro -Wl,-z,now

    # Build position independent code to take advantage of Address Space Layout Randomization
    # offered by some kernels.
    # see doc/build-unix.txt for more information.
    #ifdef PIE
    #    HARDENING+=-fPIE
    #    LDHARDENING+=-pie
    #endif

    # -D_FORTIFY_SOURCE=2 does some checking for potentially exploitable code patterns in
    # the source such overflowing a statically defined buffer.
    #HARDENING+=-D_FORTIFY_SOURCE=2
#

# CXXFLAGS
CXXFLAGS= -std=c++11 $(INCLUDEPATHS) $(DEFS) -Wno-switch -Wno-format-security -Wno-invalid-source-encoding -Wno-unused-value -Wno-deprecated-declarations -Wno-delete-incomplete

# CXXFLAGS can be specified on the make command line, so we use xCXXFLAGS that only
# adds some defaults in front. Unfortunately, CXXFLAGS=... $(CXXFLAGS) does not work.
xCXXFLAGS=$(xOPT_LEVEL) $(EXT_OPTIONS) $(DEBUGFLAGS) $(HARDENING) $(CXXFLAGS)

# LDFLAGS can be specified on the make command line, so we use xLDFLAGS that only
# adds some defaults in front. Unfortunately, LDFLAGS=... $(LDFLAGS) does not work.
xLDFLAGS=$(LDHARDENING) $(LDFLAGS)

ifneq (${BUILD_RELEASE}, 1)
 DEBUGFLAGS=-g
endif

OBJS= \
 obj/alert.o \
 obj/version.o \
 obj/checkpoints.o \
 obj/netbase.o \
 obj/addrman.o \
 obj/crypter.o \
 obj/key.o \
 obj/db.o \
 obj/init.o \
 obj/irc.o \
 obj/keystore.o \
 obj/main.o \
 obj/miner.o \
 obj/net.o \
 obj/protocol.o \
 obj/bitcoinrpc.o \
 obj/rpcdump.o \
 obj/rpcnet.o \
 obj/rpcmining.o \
 obj/rpcwallet.o \
 obj/rpcblockchain.o \
 obj/rpcrawtransaction.o \
 obj/script.o \
 obj/sync.o \
 obj/util.o \
 obj/wallet.o \
 obj/walletdb.o \
 obj/noui.o \
 obj/kernel.o \
 obj/pbkdf2.o \
 obj/scrypt.o \
 obj/scrypt-x86.o \
 obj/scrypt-x86_64.o \
 obj/ntp.o \
 obj/stun.o \
 obj/rpccrypt.o \
 obj/base58.o \
 obj/kernel_worker.o \
 obj/ecies.o \
 obj/cryptogram.o \
 obj/ipcollector.o \

all: SorachanCoind

ifneq (${USE_LEVELDB}, -)
 LIBS += "leveldb/libleveldb.a" "leveldb/libmemenv.a"
 DEFS += $(addprefix -I,"leveldb/include") -DUSE_LEVELDB
 DEFS += $(addprefix -I,"leveldb/helpers")
 OBJS += obj/txdb-leveldb.o
 obj/txdb-leveldb.o: leveldb/libleveldb.a
else
 OBJS += obj/txdb-bdb.o
endif

obj/%.o: %.cpp $(HEADERS)
	$(CXX) -c $(xCXXFLAGS) -o $@ $<

obj/scrypt-x86.o: scrypt-x86.S
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<

obj/scrypt-x86_64.o: scrypt-x86_64.S
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<

SorachanCoind: $(OBJS:obj/%=obj/%)
	$(CXX) $(xCXXFLAGS) $(LDFLAGS) -o $@ $(LIBPATHS) $^ $(LIBS)

clean:
	rm -rf SorachanCoind
	rm -rf obj/*

FORCE:
